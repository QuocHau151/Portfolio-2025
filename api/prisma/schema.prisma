generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String  @db.VarChar(500)
  password String  @db.VarChar(500)
  phone    String  @db.VarChar(50)
  avatar   String? @db.VarChar(1000)
  address  String? @db.VarChar(500)

  // Này có thể dùng để thực hiện chức năng quên mật khẩu, đăng nhập 2 bước
  totpSecret         String?        @unique @db.VarChar(1000)
  status             UserStatus     @default(INACTIVE)
  roleId             Int
  role               Role           @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  devices            Device[] // Liên kết 1-n với Device
  refreshTokens      RefreshToken[]
  carts              CartItem[]
  orders             Order[]
  reviews            Review[]
  createdPermissions Permission[]   @relation("PermissionCreatedBy")
  updatedPermissions Permission[]   @relation("PermissionUpdatedBy")
  deletedPermissions Permission[]   @relation("PermissionDeletedBy")
  createdRoles       Role[]         @relation("RoleCreatedBy")
  updatedRoles       Role[]         @relation("RoleUpdatedBy")
  deletedRoles       Role[]         @relation("RoleDeletedBy")
  createdProducts    Product[]      @relation("ProductCreatedBy")
  updatedProducts    Product[]      @relation("ProductUpdatedBy")
  deletedProducts    Product[]      @relation("ProductDeletedBy")
  createdCategories  Category[]     @relation("CategoryCreatedBy")
  updatedCategories  Category[]     @relation("CategoryUpdatedBy")
  deletedCategories  Category[]     @relation("CategoryDeletedBy")
  createdSKUS        SKU[]          @relation("SKUCreatedBy")
  updatedSKUS        SKU[]          @relation("SKUUpdatedBy")
  deletedSKUS        SKU[]          @relation("SKUDeletedBy")
  createdBrands      Brand[]        @relation("BrandCreatedBy")
  updatedBrands      Brand[]        @relation("BrandUpdatedBy")
  deletedBrands      Brand[]        @relation("BrandDeletedBy")
  createdOrders      Order[]        @relation("OrderCreatedBy")
  updatedOrders      Order[]        @relation("OrderUpdatedBy")
  deletedOrders      Order[]        @relation("OrderDeletedBy")
  sentMessages       Message[]      @relation("FromUser")
  receivedMessages   Message[]      @relation("ToUser")
  webSockets         Websocket[]

  createdById  Int?
  createdBy    User?  @relation("CreatorUsers", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  createdUsers User[] @relation("CreatorUsers")

  updatedById  Int?
  updatedBy    User?  @relation("UpdatorUsers", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedUsers User[] @relation("UpdatorUsers")
  deletedById  Int?
  deletedBy    User?  @relation("DeletorUsers", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedUsers User[] @relation("DeletorUsers")

  deletedAt    DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Blog         Blog[]
  CategoryBlog CategoryBlog[]

  @@index([deletedAt])
}

model Websocket {
  id        String   @id
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt DateTime @default(now())
}

model CategoryBlog {
  id          Int      @id @default(autoincrement())
  name        String
  createdById Int
  Blog        Blog[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [createdById], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Blog {
  id          Int          @id @default(autoincrement())
  categoryId  Int
  authorId    Int
  title       String       @db.VarChar(500)
  description String
  tag         TagBlog
  keyword     String[]
  content     String
  image       String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  category    CategoryBlog @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Component {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(500)
  description String
  authorId    Int
  typeId      Int
  content     String
  image       String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  type        ComponentType @relation(fields: [typeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model ComponentType {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(500)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  components Component[]
}

model VerificationCode {
  id    Int                  @id @default(autoincrement())
  email String               @unique @db.VarChar(500)
  code  String               @db.VarChar(50)
  type  VerificationCodeType

  expiresAt DateTime
  createdAt DateTime @default(now())

  @@unique([email, code, type])
  @@index([expiresAt])
}

model Device {
  id            Int            @id @default(autoincrement())
  userId        Int
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userAgent     String
  ip            String
  lastActive    DateTime       @updatedAt // Thay updatedAt bằng lastActive cho ý nghĩa rõ hơn
  createdAt     DateTime       @default(now())
  isActive      Boolean        @default(true) // Trạng thái thiết bị (đang login hay đã logout)
  refreshTokens RefreshToken[] // Liên kết 1-n với RefreshToken
}

model RefreshToken {
  token     String   @unique @db.VarChar(1000)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  deviceId  Int // Foreign key tới Device
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
}

model Permission {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(500)
  description String     @default("")
  path        String     @db.VarChar(1000)
  method      HTTPMethod
  roles       Role[]
  module      String     @default("") @db.VarChar(500)
  createdById Int?
  createdBy   User?      @relation("PermissionCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User?      @relation("PermissionUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User?      @relation("PermissionDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model Role {
  id Int @id @default(autoincrement())

  name        String       @db.VarChar(500)
  description String       @default("")
  isActive    Boolean      @default(true)
  permissions Permission[]
  users       User[]

  createdById Int?
  createdBy   User? @relation("RoleCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("RoleUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("RoleDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model Product {
  id                  Int                  @id @default(autoincrement())
  publishedAt         DateTime?
  name                String               @db.VarChar(500)
  basePrice           Float
  virtualPrice        Float
  brands              Brand[]
  images              String[]
  categories          Category[]
  /// [Variants]
  variants            Json
  skus                SKU[]
  reviews             Review[]
  orders              Order[]
  productSKUSnapshots ProductSKUSnapshot[]

  createdById Int
  createdBy   User  @relation("ProductCreatedBy", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("ProductUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("ProductDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(500)
  products Product[]

  createdById Int?
  createdBy   User? @relation("CategoryCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("CategoryUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("CategoryDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model SKU {
  id                  Int                  @id @default(autoincrement())
  value               String               @db.VarChar(500)
  price               Float
  stock               Int
  images              String[]
  productId           Int
  product             Product              @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  cartItems           CartItem[]
  productSKUSnapshots ProductSKUSnapshot[]

  createdById Int
  createdBy   User  @relation("SKUCreatedBy", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("SKUUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("SKUDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
  @@index([productId])
}

model Brand {
  id       Int       @id @default(autoincrement())
  logo     String    @db.VarChar(1000)
  products Product[]
  name     String    @db.VarChar(500)

  createdById Int?
  createdBy   User? @relation("BrandCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("BrandUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("BrandDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model CartItem {
  id       Int  @id @default(autoincrement())
  quantity Int
  skuId    Int
  sku      SKU  @relation(fields: [skuId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId   Int
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductSKUSnapshot {
  id          Int      @id @default(autoincrement())
  productName String   @db.VarChar(500)
  price       Float
  images      String[]
  skuValue    String   @db.VarChar(500)
  skuId       Int?
  sku         SKU?     @relation(fields: [skuId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  orderId     Int?
  order       Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  createdAt DateTime @default(now())
  Product   Product? @relation(fields: [productId], references: [id])
  productId Int?
}

model Order {
  id     Int                  @id @default(autoincrement())
  userId Int
  user   User                 @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  status OrderStatus
  items  ProductSKUSnapshot[]

  createdById Int?
  createdBy   User? @relation("OrderCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("OrderUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("OrderDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product?  @relation(fields: [productId], references: [id])
  productId Int?

  @@index([deletedAt])
}

model Review {
  id        Int     @id @default(autoincrement())
  content   String
  rating    Int
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId    Int
  user      User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentTransaction {
  id                 Int      @id @default(autoincrement())
  gateway            String   @db.VarChar(100)
  transactionDate    DateTime @default(now())
  accountNumber      String   @db.VarChar(100)
  subAccount         String?  @db.VarChar(250)
  amountIn           Int      @default(0)
  amountOut          Int      @default(0)
  accumulated        Int      @default(0)
  code               String?  @db.VarChar(250)
  transactionContent String?  @db.Text
  referenceNumber    String?  @db.VarChar(255)
  body               String?  @db.Text

  createdAt DateTime @default(now())
}

model Message {
  id         Int    @id @default(autoincrement())
  fromUserId Int
  fromUser   User   @relation("FromUser", fields: [fromUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  toUserId   Int
  toUser     User   @relation("ToUser", fields: [toUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  content    String

  readAt    DateTime?
  createdAt DateTime  @default(now())
}

enum OrderStatus {
  PENDING_CONFIRMATION
  PENDING_PICKUP
  PENDING_DELIVERY
  DELIVERED
  RETURNED
  CANCELLED
}

enum VerificationCodeType {
  REGISTER
  FORGOT_PASSWORD
  LOGIN
  DISABLE_2FA
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum HTTPMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}

enum TagBlog {
  NOI_BAT
  NORMAL
}
